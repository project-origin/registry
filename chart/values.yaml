# global values
global:
  # imageRegistry is the global docker image registry that will override the image registry for all images in all charts
  imageRegistry: ""

# image holds the configuration for the image to use for the registry
image:
  # registry is the registry to pull the image from
  registry: ghcr.io
  # repository is the repository to pull the image from
  repository: project-origin/registry-server
  # tag is the tag to pull defaults to the chart version
  tag:

# resources holds the configuration for the resource requests and limits
resources:
  # requests holds the configuration for the resource requests
  requests:
    # cpu defines the cpu request limit for the registry server
    cpu:
    # memory defines the memory request limit for the registry server
    memory:

  # limits holds the configuration for the resource limits
  limits:
    # cpu defines the cpu limit for the registry server
    cpu:
    # memory defines the memory limit for the registry server
    memory:
    # ephemeralStorage defines the ephemeral storage limit for the verifier server
    ephemeralStorage:

# service holds the configuration for the service
service:
  # type is the type of service to create, allowed values are (ClusterIP | NodePort | LoadBalancer)
  type: ClusterIP
  # nodePort is the port to expose the service on if type is NodePort
  nodePort:

# otlp holds the configuration for the opentelemetry collector
otlp:
  # enabled determines if the opentelemetry collector is enabled
  enabled: false
  # endpoint defines the endpoint of the opentelemetry collector, example "http://otel-collector:4317"
  endpoint: "http://opentelemetry-collector.otel-collector:4317"

# Enables one to override the name of the registry
registryName:

# transactionProcessor holds the configuration for the transaction processor
transactionProcessor:
  # replicas defines the number of transaction processor containers to run
  replicas: 3
  # threads defines the number of parallel threads to run per transaction processor
  threads: 5
  # defines the weight in the consistent hash ring used to determine which transaction processor to send a transaction to.
  weight: 10

# blockFinalizer holds the configuration for the block finalizer
blockFinalizer:
  # interval is the interval at which to run the block finalizer, defaults to 30 seconds allowed values are between 00:00:01 and 01:00:00
  interval: 00:05:00

# rabbitmq defines the rabbitmq configuration for rabbitmq, with rabbitmqOperator
rabbitmq:
  # host defines the host of the rabbitmq server in url format 'localhost'
  host:
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:
  # amqpPort defines the port of the rabbitmq server
  amqpPort: 5672
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:
  # httpPort defines the api management port of the rabbitmq server
  httpPort: 15672
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:
  # username defines the username to use to connect to the rabbitmq server
  username:
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:
  # password defines the password to use to connect to the rabbitmq server
  password:
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:

# postgresql holds the configuration for the postgresql database, each value is required and can be set directly, via a secretRef, or via a configMapRef
postgresql:
  # host defines the host of the postgresql database
  host:
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:
  # port defines the port of the postgresql database
  port: 5432
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:
  # database defines the name of the postgresql database
  database:
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:
  # username defines the username to use to connect to the postgresql database
  username:
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:
  # password defines the password to use to connect to the postgresql database
  password:
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:

# verifiers defines where each verifier is located
verifiers:
  # type is the type of verifier, namespace of the protobuf transactions
  # - type: project_origin.electricity.v1
  # url is the url to the verifier, the service name of the verifier
  # url: http://verifier-electricity.my-namespace.svc.cluster.local:5000

# immutableRecord holds the configuration for where and how the log is published.
immutableRecord:
  # type determines where the immutable log is send to, supported values are (log | concordium) if concordium is specified, then it must be configured below.
  type: log

  # concordium holds the configuration to contact and publish data on the network
  concordium:
    # rpcUrl are the url on which the local node is available.
    rpcUrl:
    # rpcToken is the token used to communicate with the node.
    rpcToken: rpcadmin
    # accountAddress must hold the address from which to use CCD, can be set directly, via a secretRef, or via a configMapRef
    accountAddress: #""
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:
    # accountKey holds the secret that contains the account key, can be set directly, via a secretRef, or via a configMapRef
    accountKey:
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:

# migrationWaiter holds the configuration for the migration waiter
migrationWaiter:
  # image holds the configuration for the image to use for the migration waiter
  image:
    registry: docker.io
    # repository is the repository to pull the image from
    repository: bitnami/kubectl
    # tag is the tag to pull defaults to the chart version
    tag: 1.30.4

# redis holds the configuration for the redis subchart https://charts.bitnami.com/bitnami
redis:
  # enabled specifies if the redis subchart should be enabled or not
  enabled: true

  auth:
    # enabled specifies if the redis subchart should be enabled or not
    enabled: false
