syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "common.proto";

package project_origin.registry.v1;

service RegistryService {
    rpc SendTransactions (SendTransactionsRequest) returns (SubmitTransactionResponse);
    rpc GetStreamTransactions (GetStreamTransactionsRequest) returns (GetStreamTransactionsResponse);
    rpc GetTransactionStatus(GetTransactionStatusRequest) returns (GetTransactionStatusResponse);
    rpc GetTransactionProof (GetTransactionProofRequest) returns (GetTransactionProofResponse);
    rpc GetBlocks(GetBlocksRequest) returns (GetBlocksResponse);
}

message GetBlocksRequest {
    // Number of blocks to skip.
    int32 skip = 1;

    // The maximum number of blocks to return.
    int32 limit = 2;

    // If true, the result will include the transactions in the blocks.
    bool include_transactions = 3;
}

message GetBlocksResponse {
    // The blocks.
    repeated Block blocks = 1;
}

message GetBlockTransactionsRequest {
    // The block number to get transactions from, 0 based.
    int32 block_number = 1;
}

message GetBlockTransactionsResponse {
    // The transactions in the block.
    repeated Transaction transactions = 1;
}

message SendTransactionsRequest {
    // list of transactions to be processed
    repeated Transaction transactions = 1;
}

message SubmitTransactionResponse {}

message GetStreamTransactionsRequest {
    // The id of the transaction to get stream of transactions from.
    project_origin.common.v1.Uuid stream_id = 1;
}

message GetStreamTransactionsResponse {
    // The stream of transactions.
    repeated Transaction transactions = 1;
}

message GetTransactionStatusRequest {
    //Base64 encoded SHA256 hash of the transaction
    string id = 1;
}

message GetTransactionStatusResponse {
    // The state of the transaction.
    TransactionState status = 1;

    // The error message if the transaction is invalid.
    string message = 2;
}

enum TransactionState {
    UNKNOWN = 0;
    PENDING = 1;
    FAILED = 2;
    COMMITTED = 3;
}

message GetTransactionProofRequest {
    //Base64 encoded SHA256 hash of the transaction
    string id = 1;
}

message GetTransactionProofResponse {
    MerkleProof proof = 1;
}

message TransactionHeader {
    // The target stream for which this transaction is intended
    project_origin.common.v1.FederatedStreamId federated_stream_id = 1;

    // The type of the payload, determines how the payload should be
    // deserialized and validated.
    string payload_type = 2;

    // The SHA-512 hash of the serialized payload.
    bytes payload_sha512 = 3;

    // A random string that provides uniqueness for transactions with
    // otherwise identical fields.
    string nonce = 4;
}

// A transaction holds a single atomic change to the state of a stream signed by the owner.
message Transaction {
    // The metadata of the transaction,
    // helps the transaction processor process the transaction.
    TransactionHeader header = 1;

    // The signature of the transaction header.
    bytes header_signature = 2;

    // The serialized payload of the transaction
    bytes payload = 3;
}

message MerkleProof {
    Transaction transaction = 1;
    int32 leaf_index = 2;
    repeated bytes hashes = 3;
    bytes block_id = 4;
}

message BlockHeader {
    // SHA-256 hash of the previous block header.
    bytes previous_header_hash = 1;

    // SHA-256 hash of the previous publication.
    bytes previous_publication_hash = 2;

    // SHA-256 hash of the merkle root of the transactions in the block.
    bytes merkle_root_hash = 3;

    // Timestamp of when the block was created.
    google.protobuf.Timestamp created_at = 4;
}

// A block in the immutable log.
message Block {
    // Height of the block in the chain.
    int32 height = 1;

    // The header of the block.
    BlockHeader header = 2;

    // The publication of the block.
    BlockPublication publication = 3;

    // The transactions in the block.
    repeated Transaction transactions = 4;
}

// A publication of a block.
message BlockPublication {
    // Contains the type of the publication.
    oneof immutable_log_type {
        // Should only be used for testing.
        LogEntry log_entry = 1;
        Concordium concordium = 2;
    }

    message LogEntry {
        // SHA-256 hash of the block header.
        bytes block_header_hash = 1;
    }

    message Concordium {
        // The hash of the transaction on the Concordium blockchain.
        bytes transaction_hash = 1;

        // The hash of the block on the Concordium blockchain.
        bytes block_hash = 2;
    }
}
